#! /bin/sh
# change this to #!/bin/ksh for AIX and Solaris
########################################################################
# chkconfig: 345 99 15
# description: IBM Websphere Portal

### BEGIN INIT INFO
# Provides: rc_sametime
# Required-Start: $remote_fs $syslog$network
# Required-Stop:  $remote_fs $syslog
# Default-Start:  3 5
# Default-Stop:   0 1 2 6
# Short-Description: IBM Websphere Portal Unix Script version 20100812.01
# Author: 2010 by Enio Basso ( http://ebasso.net )  
# Copyright (C) 2010 Creative Commons
# License: GNU GPL v2 or (at your option) any later version.
### END INIT INFO
########################################################################

PORTAL_HOME=/opt/Portal615

APP_SERVER_ROOT=$PORTAL_HOME/AppServer
PORTAL_SERVER_ROOT=$PORTAL_HOME/PortalServer
WP_PROFILE=$PORTAL_HOME/wp_profile
DMGR_PROFILE=$PORTAL_HOME/AppServer/profiles/Dmgr01

USERNAME=wpadmin
PASSWORD=wpadmin
SECURITY_ENABLED="yes"

PORTAL_SERVER=WebSphere_Portal
APP_SERVER=server1

# --------------------------------------- Advanced Parameters  -------------------------------
#SCRIPT_LANG=en_US.UTF-8
SCRIPT_DEBUG_MODE="yes"

# ----------------------------------------- Default Values ------------------------------------

if [ -z "$SECURITY_ENABLED" ]; then
  SECURITY_ENABLED="no"
fi

# Enable script debug output
if [ -z "$SCRIPT_DEBUG_MODE" ]; then
  SCRIPT_DEBUG_MODE="no"
fi

# Change default language from OS
if [ -z "$SCRIPT_LANG" ]; then
   LANG=$LANG
else
   LANG=$SCRIPT_LANG
fi

export LANG

# ------------ Helper Functions   -------------------------------------
SCRIPT_NAME=$0
CMD=$1
PARAM1=$2
PARAM2=$3
PARAM3=$4

DebugText ()
{
  if [ "$SCRIPT_DEBUG_MODE" = "yes" ]; then
    echo "Debug:" $1 $2 $3 $4 $5 $6 $7 $8 $9
  fi

  return 0
}

usage ()
{
  echo ""
  echo "Usage:          $0 { start | stop | restart | reload }"
  echo "Admin Commands: $0 { serverStatus | startServer1 | stopServer1 | startAll | stopAll }"
  echo "DMgr  Commands: $0 { startDmgr | stopDmgr }"
  echo "Node  Commands: $0 { startNode | stopNode }"
  #echo "Usage: `basename $SCRIPT_NAME` { start | stop | restart | status | monitor | archivelog | cmd | stopjc}"
  #echo "Diagnostic Commands:    {info | nsd | fullnsd | memdump | hang | kill | cleanup }"
  echo ""

  return 0
}

start_websphere_portal ()
{
  if [ -f "$WP_PROFILE/bin/startServer.sh" ] ; then
     echo -n "Starting WebSphere_Portal : "
     $WP_PROFILE/bin/startServer.sh $PORTAL_SERVER
     echo "OK"
  else
       DebugText "startServer.sh not available:" [$WP_PROFILE/bin/startServer.sh]
  fi
 
  return 0
}

stop_websphere_portal ()
{
  if [ -f "$WP_PROFILE/bin/stopServer.sh" ] ; then
     echo -n "Stopping WebSphere_Portal : "
     if [ "SECURITY_ENABLED" = "no" ]; then
       $WP_PROFILE/bin/stopServer.sh $PORTAL_SERVER
     else
       $WP_PROFILE/bin/stopServer.sh $PORTAL_SERVER -username $USERNAME -password $PASSWORD
     fi
     echo "OK"
  else
       DebugText "stopServer.sh not available:" [$WP_PROFILE/bin/stopServer.sh]
  fi
 
  return 0
}

start_app_server ()
{
  if [ -f "$WP_PROFILE/bin/startServer.sh" ] ; then
     echo -n "Starting server1: "
     $WP_PROFILE/bin/startServer.sh $APP_SERVER
     echo "OK"
  else
       DebugText "startServer.sh not available:" [$WP_PROFILE/bin/startServer.sh]
  fi
 
  return 0
}

stop_app_server ()
{
  if [ -f "$WP_PROFILE/bin/stopServer.sh" ] ; then
     echo -n "Stopping server1: "
     if [ "SECURITY_ENABLED" = "no" ]; then
       $WP_PROFILE/bin/stopServer.sh $APP_SERVER
     else
       $WP_PROFILE/bin/stopServer.sh $APP_SERVER -username $USERNAME -password $PASSWORD
     fi
     echo "OK"
  else
       DebugText "stopServer.sh not available:" [$WP_PROFILE/bin/stopServer.sh]
  fi
 
  return 0
}

start_deploy_manager ()
{
  if [ -f "$APP_SERVER_ROOT/bin/startManager.sh" ] ; then
     echo -n "Starting Deploy Manager: "
     $APP_SERVER_ROOT/bin/startManager.sh
     echo "OK"
  else
       DebugText "startManager.sh not available:" [$APP_SERVER_ROOT/bin/startManager.sh]
  fi
 
  return 0
}

stop_deploy_manager ()
{
  if [ -f "$APP_SERVER_ROOT/bin/stopManager.sh" ] ; then
     echo -n "Stopping Deploy Manager: "
     if [ "SECURITY_ENABLED" = "no" ]; then
       $APP_SERVER_ROOT/bin/stopManager.sh
     else
     	$APP_SERVER_ROOT/bin/stopManager.sh  -username $USERNAME -password $PASSWORD
     fi
     echo "OK"
  else
       DebugText "stopManager.sh not available:" [$APP_SERVER_ROOT/bin/stopManager.sh]
  fi
 
  return 0
}

start_node ()
{
  if [ -f "$WP_PROFILE/bin/startNode.sh" ] ; then
     echo -n "Starting Node: "
     $WP_PROFILE/bin/startNode.sh
     echo "OK"
  else
       DebugText "startNode.sh not available:" [$WP_PROFILE/bin/startNode.sh]
  fi
 
  return 0
}

stop_node ()
{
  if [ -f "$WP_PROFILE/bin/stopNode.sh" ] ; then
     echo -n "Stopping Node: "
     if [ "SECURITY_ENABLED" = "no" ]; then
       $WP_PROFILE/bin/stopNode.sh
     else
     	$WP_PROFILE/bin/stopNode.sh  -username $USERNAME -password $PASSWORD
     fi
     echo "OK"
  else
       DebugText "stopNode.sh not available:" [$WP_PROFILE/bin/stopNode.sh]
  fi
 
  return 0
}

check_server_status ()
{
  if  [ -z "$PARAM1" ]; then
    OP1=-all
  else
    OP1=$PARAM1
  fi
    
  if [ -f "$WP_PROFILE/bin/serverStatus.sh" ] ; then
     echo -n "Check server status: "
     if [ "SECURITY_ENABLED" = "no" ]; then
       echo
       $WP_PROFILE/bin/serverStatus.sh $OP1
     else
       echo
       $WP_PROFILE/bin/serverStatus.sh $OP1 -username $USERNAME -password $PASSWORD
     fi
     echo "OK"
  else
       DebugText "serverStatus.sh not available:" [$WP_PROFILE/bin/serverStatus.sh]
  fi
 
  return 0
}

# --- Sanity check for server environment ---

###########################################################   Main Script ##############################################################
case "$CMD" in
   start)
     start_websphere_portal
   ;;
   stop)
     stop_websphere_portal
  ;;
  reload|restart)
     $0 stop
     $0 start
  ;;
  startAll)
     start_app_server
     start_websphere_portal
  ;;
  stopAll)
     stop_app_server
     stop_websphere_portal
  ;;
  startServer1)
     start_app_server
  ;;
  stopServer1)
     stop_app_server
  ;;
  startDmgr)
     start_deploy_manager
  ;;
  stopDmgr)
     stop_deploy_manager
  ;;
  startNode)
     start_node
  ;;
  stopNode)
     stop_node
  ;;
  serverStatus)
     check_server_status 
  ;;
  *)
     DebugText "Invalid CMD:" [$CMD]
     usage 
     exit 1
  ;;
esac
exit 0


